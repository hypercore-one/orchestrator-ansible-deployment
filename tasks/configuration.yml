---
- name: Check UFW status and configure ports
  block:
    - name: Check if UFW is installed
      ansible.builtin.command: which ufw
      register: ufw_check
      changed_when: false
      ignore_errors: true

    - name: Get UFW status
      ansible.builtin.shell: ufw status
      register: ufw_status
      changed_when: false
      ignore_errors: true
      when: ufw_check.rc == 0

    - name: Set UFW active status
      ansible.builtin.set_fact:
        ufw_active: "{{ ufw_check.rc == 0 and ufw_status.stdout is defined and 'Status: active' in ufw_status.stdout }}"

    - name: Display UFW status
      ansible.builtin.debug:
        msg: >
          UFW Status:
          Installed: {{ 'Yes' if ufw_check.rc == 0 else 'No' }}
          {% if ufw_check.rc == 0 %}
          Active: {{ 'Yes' if ufw_active else 'No' }}
          {% endif %}

    - name: Configure UFW for orchestrator ports
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 55055  # P2P port
        - 55000  # API port
      when: ufw_active

    - name: Report UFW configuration
      ansible.builtin.debug:
        msg: >
          UFW Configuration:
          Status: {{ 'Enabled' if ufw_active else 'Disabled or not installed' }}
          Ports configured: {{ '55055, 55000' if ufw_active else 'N/A' }}
          Note: UFW will not be enabled if it is not already active

- name: Create config.json template
  ansible.builtin.template:
    src: templates/config.json.j2
    dest: "{{ orchestrator_config_dir }}/config.json"
    mode: '0644'
    backup: yes

- name: Create systemd service file
  ansible.builtin.template:
    src: templates/orchestrator.service.j2
    dest: /etc/systemd/system/orchestrator.service
    mode: '0644'
    backup: yes

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable and start orchestrator service
  ansible.builtin.systemd:
    name: orchestrator
    state: started
    enabled: yes
  register: service_start

- name: Show service status
  ansible.builtin.debug:
    msg: "Orchestrator service {{ 'started successfully' if service_start.changed else 'was already running' }}"

- name: Wait for orchestrator to be ready
  block:
    - name: Check orchestrator service status
      ansible.builtin.systemd:
        name: orchestrator
        state: started
      register: service_status

    - name: Get orchestrator logs
      ansible.builtin.shell: journalctl -u orchestrator -n 50 --no-pager
      register: orchestrator_logs
      changed_when: false

    - name: Display orchestrator status
      ansible.builtin.debug:
        msg: >
          Orchestrator Status:
          Service: {{ 'Running' if service_status.status.ActiveState == 'active' else 'Not running' }}
          Last Logs:
          {% for line in orchestrator_logs.stdout_lines %}
          {{ line }}
          {% endfor %}

  rescue:
    - name: Report startup failure
      ansible.builtin.fail:
        msg: >
          Orchestrator service failed to start properly.
          Please check the service status with: systemctl status orchestrator
          And view the logs with: journalctl -u orchestrator -n 100 --no-pager