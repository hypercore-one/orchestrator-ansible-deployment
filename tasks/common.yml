---
- name: Verify system requirements
  block:
    - name: Confirm QSR Amount
      block:
        - name: Check producer QSR amount
          ansible.builtin.shell: |
            curl -X POST {{ zenon_node_http_url }} \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc": "2.0", "id": 40, "method": "embedded.plasma.get", "params": ["{{ producer_address }}"]}'
          register: plasma_check
          ignore_errors: true

        - name: Verify QSR amount
          ansible.builtin.fail:
            msg: >
              Insufficient QSR fused to producer address.
              
              Required: 120 QSR
              Producer Address: {{ producer_address }}
              
              Please fuse 120 QSR to the producer address before continuing.
              You can do this through the Zenon wallet or using the Zenon CLI.
              
              Installation aborted.
          when: >
            plasma_check.stdout is defined and
            plasma_check.stdout | from_json | json_query('result.qsrAmount') | int < 12000000000

    - name: Verify system architecture
      block:
        - name: Check system architecture
          ansible.builtin.shell: uname -m
          register: system_arch
          changed_when: no

        - name: Display system architecture
          ansible.builtin.debug:
            msg: "System architecture: {{ system_arch.stdout }}"

        - name: Verify system architecture
          ansible.builtin.fail:
            msg: "Unsupported system architecture. This playbook requires x86_64 architecture."
          when: system_arch.stdout != "x86_64"

    - name: Check CPU cores
      ansible.builtin.shell: nproc
      register: cpu_cores
      changed_when: no

    - name: Display CPU cores
      ansible.builtin.debug:
        msg: "CPU cores: {{ cpu_cores.stdout }} (minimum required: {{ min_cpu_cores }})"

    - name: Verify minimum CPU cores
      ansible.builtin.fail:
        msg: "System does not meet minimum CPU requirements ({{ min_cpu_cores }} cores needed)"
      when: cpu_cores.stdout | int < min_cpu_cores

    - name: Check available memory
      ansible.builtin.shell: free -g | awk '/^Mem:/{print $2}'
      register: available_memory
      changed_when: no

    - name: Display available memory
      ansible.builtin.debug:
        msg: "Available RAM: {{ available_memory.stdout }}GB (minimum required: {{ min_ram_gb }}GB)"

    - name: Verify minimum RAM
      ansible.builtin.fail:
        msg: "System does not meet minimum RAM requirements ({{ min_ram_gb }}GB needed)"
      when: available_memory.stdout | int < min_ram_gb

    - name: Check available disk space
      ansible.builtin.shell: df -BG / | awk 'NR==2 {print $4}' | sed 's/G//'
      register: available_disk
      changed_when: no

    - name: Display available disk space
      ansible.builtin.debug:
        msg: "Available disk space: {{ available_disk.stdout }}GB (minimum required: {{ min_disk_gb }}GB)"

    - name: Verify minimum disk space
      ansible.builtin.fail:
        msg: "System does not meet minimum disk space requirements ({{ min_disk_gb }}GB needed)"
      when: available_disk.stdout | int < min_disk_gb
  rescue:
    - name: Report system check failure
      ansible.builtin.fail:
        msg: "System requirements check failed. Please ensure all requirements are met."

- name: Set package manager variables
  ansible.builtin.set_fact:
    pkg_mgr: "{{ ansible_os_family | lower }}"
    pkg_list:
      - unzip
      - wget
      - curl

- name: Install required packages (Debian/Ubuntu)
  ansible.builtin.apt:
    name: "{{ pkg_list }}"
    state: present
    update_cache: yes
  when: pkg_mgr == "debian"

- name: Install required packages (RHEL/CentOS/Fedora)
  ansible.builtin.dnf:
    name: "{{ pkg_list }}"
    state: present
    update_cache: yes
  when: pkg_mgr == "redhat"
